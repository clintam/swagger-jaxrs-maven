h2. Overview

This project provides a Maven plug-in that can generate "Swagger documentation":https://helloreverb.com/developers/swagger for JAX-RS web services.  The goal is to produce documentation for REST web services at build-time rather than run-time so that applicaiton runtime dependencies are kept to a minimum.

h3. Status

This project is in it's infancy and has not yet had wide adoption.  There is a lot to do before this project is ready for prime-time.

h4. What it does

# Generates Swagger documentation as .json files at build-time
# Handles a specific style of JAX-RS service authoring; for example it expects annotations to be fairly complete

h4. Missing features

# Currently the model portion of the Swagger documentation is not generated
# Handling for a wide set of data types (e.g. double, float, date, ...)
# Handling for a variety of serialization frameworks (e.g. Jackson, JAXB, ...) 

h3. Motivation

This project was created because documentation for web services is important and Swagger is a great way to do it.  To date Swagger documentation is either written completely by hand or is generated using Swagger annotations at runtime.  Authoring Swagger docs from scratch means that the documentation is separate from the source code and it's easy for the documentation to become inaccurate.  Runtime generation of Swagger documentation adds a huge number of dependencies to your project's runtime (about 30 the last time I counted).  Dependencies add complexity and maintenance overhead, and also add overhead to maintaining an IP-clean project.

The goal of this project is to enable annotation-based documentation of JAX-RS web services without adding numerous project runtime dependencies. 

h2. Project Requirements

In order to generate Swagger documentation for your project the following requirements must be met:

* Your project has at least one JAX-RS for REST-based services
* Your JAX-RS service is annotated with Swagger API annotations
* Your project has a Maven build

This has been tested with "Jersey":http://jersey.java.net JAX-RS services, but does not depend on Jersey directly so should work with JAX-RS services targeting other frameworks as well.

h2. Maven Project Setup

Your project's Maven pom should look something like this:

Add a Swagger annotations dependency so that Swagger annotations can be used in your project 

bc. 
		<dependency>
			<groupId>com.wordnik</groupId>
			<artifactId>swagger-annotations_2.9.1</artifactId>
			<version>1.3.0</version>
		</dependency>
		
Add this plug-in to your pom.xml's build:

bc. <build>
		<finalName>web</finalName>
		<plugins>
			<plugin>
				<groupId>greensopinion.swagger</groupId>
				<artifactId>jaxrs-gen</artifactId>
				<version>1.0-SNAPSHOT</version>
				<configuration>
					<apiVersion>1.0</apiVersion>
					<apiBasePath>/api/latest</apiBasePath>
					<packageNames>
						<param>my.project.package.name</param> <!-- the package name of your project's JAX-RS web services. -->
					</packageNames>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

h2. Building Documentation

Documentation is created as part of the compile step as follows:

pre. mvn compile

Your Maven output should look something like this:

pre. [INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building web Maven Webapp 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ web ---
[INFO] Copying 0 resource
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ web ---
[INFO] Compiling 13 source files to /myproject/web/target/classes
[INFO] 
[INFO] --- jaxrs-gen:1.0-SNAPSHOT:generate (default) @ web ---
[INFO] API class: myproject.web.MyService
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1.796s
[INFO] Finished at: Fri Mar 14 07:35:36 PDT 2014
[INFO] Final Memory: 19M/310M
[INFO] ------------------------------------------------------------------------

h2. Example JAX-RS Service

This Maven plug-in expects your JAX-RS service to look something like this: 

bc.. 
@Path("/pets")
@Api(value = "/pets", description = "Operations about pets")
@Produces(MediaType.APPLICATION_JSON)
public class PetService {

	@GET
	@ApiOperation(value = "List all pets", notes = "List all pets. Results are paginated.", response = PetListing.class)
	public PetListing list(@QueryParam("start") @DefaultValue("0") int start,
			@QueryParam("count") @DefaultValue("50") int count) {
		return null;
	}

	@GET
	@Path("/{id}")
	@ApiOperation(value = "Retrieve pet by id", notes = "Retrieves a pet by it's id.", response = Pet.class)
	@ApiResponses(value = { @ApiResponse(code = 404, message = "Pet not found") })
	public Pet retrievePet(@PathParam("id") long id) {
		return null;
	}

	@DELETE
	@Path("/{id}")
	@ApiOperation(value = "Delete pet by id", notes = "Deletes a pet by it's id.")
	@ApiResponses(value = { @ApiResponse(code = 404, message = "Pet not found") })
	public void deletePet(@PathParam("id") long id) {
	}

	@PUT
	@ApiOperation(value = "Creates a new pet", notes = "Creates a new pet with the given name.", response = PetHandle.class)
	public PetHandle createPet(NewPet newPet) {
		return null;
	}

	@POST
	@Path("/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	@ApiOperation(value = "Updates a pet", notes = "Updates an existing pet with the provided details.")
	@ApiResponses(value = { @ApiResponse(code = 404, message = "Pet not found") })
	public void updatePet(Pet pet, @PathParam("id") long id) {
	}
}